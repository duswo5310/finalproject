<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	mapper는 구문을 만들 수 있는 영역
	일반적으로 테이블당 1개씩의 mapper를 둔다
	
	- namespace : 영역을 외부에서 부르기 위한 별칭(일반적으로 테이블 이름으로 사용)
 -->
<mapper namespace="coupon">
	<!-- 전체 지점 쿠폰 등록 -->
	<insert id="registA" parameterType="couponDto">
		INSERT INTO coupon(
			coupon_no,
			branch_no,
			admin_no,
			coupon_name,
			coupon_discount,
			coupon_category,
			coupon_start,
			coupon_finish,
			group_no
		) VALUES (
			coupon_seq.nextval,
			#{branch_no},
			#{admin_no},			
			#{coupon_name},
			#{coupon_discount},
			'전체',
			#{coupon_start},
			#{coupon_finish},
			#{group_no}
		)
	</insert>
	
	<!-- 특정 지점 쿠폰 등록 -->
	<insert id="registB" parameterType="couponDto">
		INSERT INTO coupon(
			coupon_no,
			branch_no,
			admin_no,
			coupon_name,
			coupon_discount,
			coupon_category,
			coupon_start,
			coupon_finish,
			group_no
		) VALUES (
			coupon_seq.nextval,
			#{branch_no},
			#{admin_no},			
			#{coupon_name},
			#{coupon_discount},
			'지점',
			#{coupon_start},
			#{coupon_finish},
			#{group_no}
		)
	</insert>
	
	<!-- 대상별 쿠폰 목록(전체발급)  -->
	<select id="getListA" parameterType="String" resultType="couponDto">
		SELECT * FROM (
			SELECT  c.*, b.BRANCH_NAME, ROW_NUMBER() OVER (PARTITION BY c.group_no ORDER BY c.branch_no DESC) AS RankNo 
			FROM coupon c LEFT OUTER JOIN BRANCH b ON c.BRANCH_NO = b.BRANCH_NO WHERE c.COUPON_CATEGORY = '전체'
			
		<if test="order == 'start'"> <!-- 예정일 경우 -->
				AND to_char(c.COUPON_START, 'yyyy-mm-dd') <![CDATA[>]]> to_char(sysdate, 'yyyy-mm-dd')
		</if>
		<if test="order == 'ing'"> <!-- 유효일 경우 -->
				AND to_char(c.COUPON_START, 'yyyy-mm-dd') <![CDATA[<=]]> to_char(sysdate, 'yyyy-mm-dd')
				AND to_char(c.COUPON_FINISH , 'yyyy-mm-dd') <![CDATA[>=]]> to_char(sysdate, 'yyyy-mm-dd')
			
		</if>
		<if test="order == 'finish'"> <!-- 만료일 경우 -->
				AND to_char(c.COUPON_START, 'yyyy-mm-dd') <![CDATA[<=]]> to_char(sysdate, 'yyyy-mm-dd')
				AND to_char(c.COUPON_FINISH , 'yyyy-mm-dd') <![CDATA[<]]> to_char(sysdate, 'yyyy-mm-dd')
		</if>
			) T WHERE RankNo = 1 ORDER BY T.coupon_date DESC
	</select>
	
	<!-- 대상별 쿠폰 목록(지점발급) -->
	<select id="getListB" parameterType="map" resultType="couponDto">
		SELECT c.*, b.BRANCH_NAME FROM coupon c 
		LEFT OUTER JOIN BRANCH b ON c.BRANCH_NO = b.BRANCH_NO 
		WHERE c.branch_no = #{branch_no} and c.coupon_category = '지점'
		<if test="order == 'start'"> <!-- 예정일 경우 -->
				AND to_char(c.COUPON_START, 'yyyy-mm-dd') <![CDATA[>]]> to_char(sysdate, 'yyyy-mm-dd')
		</if>
		<if test="order == 'ing'"> <!-- 유효일 경우 -->
				AND to_char(c.COUPON_START, 'yyyy-mm-dd') <![CDATA[<=]]> to_char(sysdate, 'yyyy-mm-dd')
				AND to_char(c.COUPON_FINISH , 'yyyy-mm-dd') <![CDATA[>=]]> to_char(sysdate, 'yyyy-mm-dd')
			
		</if>
		<if test="order == 'finish'"> <!-- 만료일 경우 -->
				AND to_char(c.COUPON_START, 'yyyy-mm-dd') <![CDATA[<=]]> to_char(sysdate, 'yyyy-mm-dd')
				AND to_char(c.COUPON_FINISH , 'yyyy-mm-dd') <![CDATA[<]]> to_char(sysdate, 'yyyy-mm-dd')
		</if>
	</select>
	
	<!-- 쿠폰 그룹번호 추출 -->
	<select id="getGroupSeq" resultType="int">
		SELECT coupon_group_seq.nextval FROM dual
	</select>
	
	<!-- 해당 그룹 쿠폰 삭제 -->
	<delete id="delete" parameterType="int">
		DELETE FROM coupon WHERE group_no = #{group_no}
	</delete>
	
	<!-- 해당 지점 쿠폰 삭제 -->
	<delete id="branchDelete" parameterType="map">
		DELETE FROM coupon WHERE branch_no = #{branch_no} and group_no = #{group_no}
	</delete>
	
	<!-- 쿠폰 수정 -->
	<update id="edit" parameterType="couponDto">
		UPDATE coupon SET
			coupon_name = #{coupon_name},
			coupon_discount = #{coupon_discount},
			coupon_start = #{coupon_start},
			coupon_finish= #{coupon_finish}
		WHERE group_no = #{group_no}
	</update>
	
	<!-- 그룹번호당 1개의 쿠폰정보만 가져오기 -->
	<select id="getCouponList" resultType="couponDto" parameterType="String">
		SELECT * FROM (
			SELECT  c.*, b.BRANCH_NAME, ROW_NUMBER() OVER (PARTITION BY c.group_no ORDER BY c.branch_no DESC) AS RankNo 
			FROM coupon c LEFT OUTER JOIN BRANCH b ON c.BRANCH_NO = b.BRANCH_NO 
			<if test="order == 'start'"> <!-- 예정일 경우 -->
				WHERE to_char(c.COUPON_START, 'yyyy-mm-dd') <![CDATA[>]]> to_char(sysdate, 'yyyy-mm-dd')
			</if>
			<if test="order == 'ing'"> <!-- 유효일 경우 -->
				WHERE to_char(c.COUPON_START, 'yyyy-mm-dd') <![CDATA[<=]]> to_char(sysdate, 'yyyy-mm-dd')
				AND to_char(c.COUPON_FINISH , 'yyyy-mm-dd') <![CDATA[>=]]> to_char(sysdate, 'yyyy-mm-dd')
			
			</if>
			<if test="order == 'finish'"> <!-- 만료일 경우 -->
				WHERE to_char(c.COUPON_START, 'yyyy-mm-dd') <![CDATA[<=]]> to_char(sysdate, 'yyyy-mm-dd')
				AND to_char(c.COUPON_FINISH , 'yyyy-mm-dd') <![CDATA[<]]> to_char(sysdate, 'yyyy-mm-dd')
			</if>
			) T WHERE RankNo = 1 ORDER BY T.coupon_date DESC
	</select>
	
	<!-- 그룹번호와 일치하는 지점정보 가져오기 (=해당 쿠폰 발급된 지점)-->
	<select id="getBranchList" parameterType="int" resultType="branchDto">
		SELECT b.BRANCH_NO, l.LOCAL_NAME, b.BRANCH_NAME FROM coupon c 
			LEFT OUTER JOIN BRANCH b ON c.BRANCH_NO = b.BRANCH_NO
			LEFT OUTER JOIN LOCAL l ON b.LOCAL_NO = l.LOCAL_NO
		WHERE c.GROUP_NO = #{group_no}
	</select>
	
	<select id="getReqList" parameterType="map" resultType="couponReqDto">
		SELECT * FROM coupon_req WHERE branch_no = #{branch_no}
		<if test="order != 'all'">
			AND coupon_req_state = #{order}
		</if>
		ORDER BY coupon_req_date DESC
	</select>
	
	<!-- 쿠폰 삭제전에 유효인지 확인 -->
	<select id="checkIssue" parameterType="map" resultType="couponDto">
		SELECT * FROM coupon WHERE branch_no = #{branch_no} and group_no = #{group_no}
	</select>
	
	
	<!-- 스케줄러 -->	
	<!-- 시작일이 오늘인 쿠폰 조회 -->
	<select id="todayStart" resultType="couponDto">
		SELECT c.coupon_no, c.branch_no, m.member_no FROM coupon c 
			INNER JOIN member m ON c.branch_no = m.branch_no 
		WHERE to_char(c.COUPON_START, 'yyyy-mm-dd') = to_char(sysdate, 'yyyy-mm-dd')
	</select>
	
	<!-- 종료일이 오늘인 쿠폰 조회 -->
	<select id="todayFinish" resultType="couponDto">
		SELECT coupon_no FROM coupon 
		WHERE to_char(COUPON_FINISH, 'yyyy-mm-dd') = to_char(sysdate, 'yyyy-mm-dd')
	</select>
	
</mapper>




